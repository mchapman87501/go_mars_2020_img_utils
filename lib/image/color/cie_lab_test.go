package color

import (
	"fmt"
	"testing"
)

// These test cases were produced using Python colormath:
// https://github.com/gtaylor/python-colormath.git
var labTestCases = []struct {
	r, g, b          uint32  // input
	labL, laba, labb float64 // expected output
}{
	{0x0000, 0x0000, 0x0000, 0.000000, 0.000000, 0.000000},
	{0x0000, 0x0000, 0x547a, 5.801708, 34.323117, -47.742704},
	{0x0000, 0x0000, 0xab84, 19.777226, 58.660147, -79.900144},
	{0x0000, 0x0000, 0xffff, 32.299375, 79.191396, -107.865464},
	{0x0000, 0x547a, 0x0000, 30.311022, -38.475156, 37.134325},
	{0x0000, 0x547a, 0x547a, 31.819511, -21.466063, -6.311993},
	{0x0000, 0x547a, 0xab84, 36.550241, 13.528011, -52.265166},
	{0x0000, 0x547a, 0xffff, 43.627128, 46.347974, -89.043166},
	{0x0000, 0xab84, 0x0000, 60.840551, -63.839062, 61.614318},
	{0x0000, 0xab84, 0x547a, 61.402410, -56.756036, 34.215387},
	{0x0000, 0xab84, 0xab84, 63.343479, -35.617096, -10.473036},
	{0x0000, 0xab84, 0xffff, 66.737398, -6.703006, -51.683408},
	{0x0000, 0xffff, 0x0000, 87.735003, -86.182949, 83.179536},
	{0x0000, 0xffff, 0x547a, 88.044626, -82.193604, 64.989754},
	{0x0000, 0xffff, 0xab84, 89.134596, -69.053979, 26.403549},
	{0x0000, 0xffff, 0xffff, 91.113964, -48.083200, -14.138634},
	{0x547a, 0x0000, 0x0000, 14.910753, 35.755248, 23.247809},
	{0x547a, 0x0000, 0x547a, 18.073612, 43.855767, -27.158931},
	{0x547a, 0x0000, 0xab84, 26.233328, 61.654306, -68.978777},
	{0x547a, 0x0000, 0xffff, 36.196575, 80.683208, -101.261394},
	{0x547a, 0x547a, 0x0000, 34.509221, -9.624155, 42.178060},
	{0x547a, 0x547a, 0x547a, 35.786549, -0.000205, -0.003822},
	{0x547a, 0x547a, 0xab84, 39.897494, 24.285167, -46.700135},
	{0x547a, 0x547a, 0xffff, 46.276634, 51.487634, -84.589444},
	{0x547a, 0xab84, 0x0000, 62.472975, -50.038218, 63.599786},
	{0x547a, 0xab84, 0x547a, 63.011940, -44.124607, 36.564486},
	{0x547a, 0xab84, 0xab84, 64.877445, -25.969609, -8.022248},
	{0x547a, 0xab84, 0xffff, 68.151249, -0.123865, -49.357222},
	{0x547a, 0xffff, 0x0000, 88.641916, -78.144483, 84.285135},
	{0x547a, 0xffff, 0x547a, 88.946219, -74.461165, 66.223213},
	{0x547a, 0xffff, 0xab84, 90.017824, -62.253410, 27.750893},
	{0x547a, 0xffff, 0xffff, 91.965236, -42.555232, -12.777443},
	{0xab84, 0x0000, 0x0000, 35.287990, 59.326113, 49.602528},
	{0xab84, 0x0000, 0x547a, 36.528185, 62.662056, 2.669032},
	{0xab84, 0x0000, 0xab84, 40.535895, 72.766722, -45.062863},
	{0xab84, 0x0000, 0xffff, 46.792558, 87.071347, -83.402499},
	{0xab84, 0x547a, 0x0000, 45.642992, 31.415494, 54.899182},
	{0xab84, 0x547a, 0x547a, 46.510189, 35.446376, 16.638413},
	{0xab84, 0x547a, 0xab84, 49.423651, 47.813316, -31.006264},
	{0xab84, 0x547a, 0xffff, 54.264905, 65.445903, -71.223597},
	{0xab84, 0xab84, 0x0000, 67.806321, -15.968668, 69.983024},
	{0xab84, 0xab84, 0x547a, 68.279448, -12.201322, 44.155531},
	{0xab84, 0xab84, 0xab84, 69.925700, -0.000340, -0.006342},
	{0xab84, 0xab84, 0xffff, 72.844819, 18.897987, -41.661598},
	{0xab84, 0xffff, 0x0000, 91.756142, -54.167621, 88.054771},
	{0xab84, 0xffff, 0x547a, 92.043180, -51.265393, 70.431848},
	{0xab84, 0xffff, 0xab84, 93.055084, -41.492364, 32.364728},
	{0xab84, 0xffff, 0xffff, 94.898221, -25.260689, -8.099697},
	{0xffff, 0x0000, 0x0000, 53.238960, 80.090453, 67.201384},
	{0xffff, 0x0000, 0x547a, 53.929132, 81.965720, 29.174022},
	{0xffff, 0x0000, 0xab84, 56.286991, 88.179899, -19.275823},
	{0xffff, 0x0000, 0xffff, 60.323649, 98.235320, -60.835017},
	{0xffff, 0x547a, 0x0000, 59.551937, 62.373194, 69.897217},
	{0xffff, 0x547a, 0x547a, 60.132907, 64.488898, 36.860756},
	{0xffff, 0x547a, 0xab84, 62.136778, 71.509046, -10.433399},
	{0xffff, 0x547a, 0xffff, 65.629694, 82.873613, -52.385582},
	{0xffff, 0xab84, 0x0000, 76.272845, 20.878579, 79.828032},
	{0xffff, 0xab84, 0x547a, 76.663681, 23.173041, 55.935885},
	{0xffff, 0xab84, 0xab84, 78.031974, 30.895364, 12.700540},
	{0xffff, 0xab84, 0xffff, 80.488499, 43.707847, -29.220320},
	{0xffff, 0xffff, 0x0000, 97.138816, -21.557756, 94.477318},
	{0xffff, 0xffff, 0x547a, 97.399286, -19.462758, 77.609286},
	{0xffff, 0xffff, 0xab84, 98.319009, -12.291379, 40.289155},
	{0xffff, 0xffff, 0xffff, 99.999985, -0.000459, -0.008561},
	// These fake "wants" should fail the delta E test:
	// {0xffff, 0xffff, 0xffff, 90.999985, -0.000459, -0.008561},
	// {0xffff, 0xffff, 0xffff, 99.999985, 3.459, -0.008561},
	// {0xffff, 0xffff, 0xffff, 99.999985, -0.000459, -2.8561},
}

func TestRGBToLab(t *testing.T) {
	for _, tc := range labTestCases {
		labL, laba, labb := rgbToCIELab(tc.r, tc.g, tc.b)

		// Since I haven't written tests for DeltaECIE2000, this is pretty
		// worthless.
		gotLab := CIELab{labL, laba, labb}
		wantLab := CIELab{tc.labL, tc.laba, tc.labb}
		dE := DeltaECIE2000(gotLab, wantLab)
		// Is the difference greater than the smallest human-noticeable difference?
		if dE >= 2.3 {
			t.Errorf(
				"rgbToCIELab%v: want %v, got %v",
				hexTupleStr(tc.r, tc.g, tc.b),
				fTupleStr(tc.labL, tc.laba, tc.labb),
				fTupleStr(labL, laba, labb))
		} else {
			fmt.Println("Î”e:", dE)
		}
	}
}
