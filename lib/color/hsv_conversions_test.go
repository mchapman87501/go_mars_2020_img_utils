package color

import (
	"fmt"
	"testing"
)

// Are two values approximately equal?
func eq(a, b float64) bool {
	aRound := int(a*100.0 + 0.5)
	bRound := int(b*100.0 + 0.5)
	result := aRound == bRound
	if !result {
		fmt.Println(a, "!=", b, "(", aRound, "!=", bRound, ")")
	}
	return result
}

func hsvStr(h, s, v float64) string {
	return fmt.Sprintf("(%.2f, %.2f, %.2f)", h, s, v)
}

func rgb2hsvTC(r, g, b uint8, hWant, sWant, vWant float64, t *testing.T) {
	hGot, sGot, vGot := RGB8ToHSV(r, g, b)
	if !(eq(hWant, hGot) && eq(sWant, sGot) && eq(vWant, vGot)) {
		rgbStr := fmt.Sprintf("(%d, %d, %d)", r, g, b)
		wantStr := hsvStr(hWant, sWant, vWant)
		gotStr := hsvStr(hGot, sGot, vGot)
		t.Errorf("RGBToHSV failed for %s: want %s, got %s", rgbStr, wantStr, gotStr)
	}
}

func TestRGBToHSV(t *testing.T) {
	testCases := []struct {
		r, g, b             uint8
		hWant, sWant, vWant float64
	}{
		// Test cases generated using Python's colorsys
		{0, 0, 0, 0.00, 0.00, 0.00},
		{0, 0, 51, 0.67, 1.00, 0.20},
		{0, 0, 102, 0.67, 1.00, 0.40},
		{0, 0, 153, 0.67, 1.00, 0.60},
		{0, 0, 204, 0.67, 1.00, 0.80},
		{0, 0, 255, 0.67, 1.00, 1.00},
		{0, 51, 0, 0.33, 1.00, 0.20},
		{0, 51, 51, 0.50, 1.00, 0.20},
		{0, 51, 102, 0.58, 1.00, 0.40},
		{0, 51, 153, 0.61, 1.00, 0.60},
		{0, 51, 204, 0.625, 1.00, 0.80},
		{0, 51, 255, 0.625, 1.00, 1.00},
		{0, 102, 0, 0.33, 1.00, 0.40},
		{0, 102, 51, 0.42, 1.00, 0.40},
		{0, 102, 102, 0.50, 1.00, 0.40},
		{0, 102, 153, 0.56, 1.00, 0.60},
		{0, 102, 204, 0.58, 1.00, 0.80},
		{0, 102, 255, 0.60, 1.00, 1.00},
		{0, 153, 0, 0.33, 1.00, 0.60},
		{0, 153, 51, 0.39, 1.00, 0.60},
		{0, 153, 102, 0.44, 1.00, 0.60},
		{0, 153, 153, 0.50, 1.00, 0.60},
		{0, 153, 204, 0.54, 1.00, 0.80},
		{0, 153, 255, 0.57, 1.00, 1.00},
		{0, 204, 0, 0.33, 1.00, 0.80},
		{0, 204, 51, 0.38, 1.00, 0.80},
		{0, 204, 102, 0.42, 1.00, 0.80},
		{0, 204, 153, 0.46, 1.00, 0.80},
		{0, 204, 204, 0.50, 1.00, 0.80},
		{0, 204, 255, 0.53, 1.00, 1.00},
		{0, 255, 0, 0.33, 1.00, 1.00},
		{0, 255, 51, 0.37, 1.00, 1.00},
		{0, 255, 102, 0.40, 1.00, 1.00},
		{0, 255, 153, 0.43, 1.00, 1.00},
		{0, 255, 204, 0.47, 1.00, 1.00},
		{0, 255, 255, 0.50, 1.00, 1.00},
		{51, 0, 0, 0.00, 1.00, 0.20},
		{51, 0, 51, 0.83, 1.00, 0.20},
		{51, 0, 102, 0.75, 1.00, 0.40},
		{51, 0, 153, 0.72, 1.00, 0.60},
		{51, 0, 204, 0.71, 1.00, 0.80},
		{51, 0, 255, 0.70, 1.00, 1.00},
		{51, 51, 0, 0.17, 1.00, 0.20},
		{51, 51, 51, 0.00, 0.00, 0.20},
		{51, 51, 102, 0.67, 0.50, 0.40},
		{51, 51, 153, 0.67, 0.67, 0.60},
		{51, 51, 204, 0.67, 0.75, 0.80},
		{51, 51, 255, 0.67, 0.80, 1.00},
		{51, 102, 0, 0.25, 1.00, 0.40},
		{51, 102, 51, 0.33, 0.50, 0.40},
		{51, 102, 102, 0.50, 0.50, 0.40},
		{51, 102, 153, 0.58, 0.67, 0.60},
		{51, 102, 204, 0.61, 0.75, 0.80},
		{51, 102, 255, 0.625, 0.80, 1.00},
		{51, 153, 0, 0.28, 1.00, 0.60},
		{51, 153, 51, 0.33, 0.67, 0.60},
		{51, 153, 102, 0.42, 0.67, 0.60},
		{51, 153, 153, 0.50, 0.67, 0.60},
		{51, 153, 204, 0.56, 0.75, 0.80},
		{51, 153, 255, 0.58, 0.80, 1.00},
		{51, 204, 0, 0.29, 1.00, 0.80},
		{51, 204, 51, 0.33, 0.75, 0.80},
		{51, 204, 102, 0.39, 0.75, 0.80},
		{51, 204, 153, 0.44, 0.75, 0.80},
		{51, 204, 204, 0.50, 0.75, 0.80},
		{51, 204, 255, 0.54, 0.80, 1.00},
		{51, 255, 0, 0.30, 1.00, 1.00},
		{51, 255, 51, 0.33, 0.80, 1.00},
		{51, 255, 102, 0.38, 0.80, 1.00},
		{51, 255, 153, 0.42, 0.80, 1.00},
		{51, 255, 204, 0.46, 0.80, 1.00},
		{51, 255, 255, 0.50, 0.80, 1.00},
		{102, 0, 0, 0.00, 1.00, 0.40},
		{102, 0, 51, 0.92, 1.00, 0.40},
		{102, 0, 102, 0.83, 1.00, 0.40},
		{102, 0, 153, 0.78, 1.00, 0.60},
		{102, 0, 204, 0.75, 1.00, 0.80},
		{102, 0, 255, 0.73, 1.00, 1.00},
		{102, 51, 0, 0.08, 1.00, 0.40},
		{102, 51, 51, 0.00, 0.50, 0.40},
		{102, 51, 102, 0.83, 0.50, 0.40},
		{102, 51, 153, 0.75, 0.67, 0.60},
		{102, 51, 204, 0.72, 0.75, 0.80},
		{102, 51, 255, 0.71, 0.80, 1.00},
		{102, 102, 0, 0.17, 1.00, 0.40},
		{102, 102, 51, 0.17, 0.50, 0.40},
		{102, 102, 102, 0.00, 0.00, 0.40},
		{102, 102, 153, 0.67, 0.33, 0.60},
		{102, 102, 204, 0.67, 0.50, 0.80},
		{102, 102, 255, 0.67, 0.60, 1.00},
		{102, 153, 0, 0.22, 1.00, 0.60},
		{102, 153, 51, 0.25, 0.67, 0.60},
		{102, 153, 102, 0.33, 0.33, 0.60},
		{102, 153, 153, 0.50, 0.33, 0.60},
		{102, 153, 204, 0.58, 0.50, 0.80},
		{102, 153, 255, 0.61, 0.60, 1.00},
		{102, 204, 0, 0.25, 1.00, 0.80},
		{102, 204, 51, 0.28, 0.75, 0.80},
		{102, 204, 102, 0.33, 0.50, 0.80},
		{102, 204, 153, 0.42, 0.50, 0.80},
		{102, 204, 204, 0.50, 0.50, 0.80},
		{102, 204, 255, 0.56, 0.60, 1.00},
		{102, 255, 0, 0.27, 1.00, 1.00},
		{102, 255, 51, 0.29, 0.80, 1.00},
		{102, 255, 102, 0.33, 0.60, 1.00},
		{102, 255, 153, 0.39, 0.60, 1.00},
		{102, 255, 204, 0.44, 0.60, 1.00},
		{102, 255, 255, 0.50, 0.60, 1.00},
		{153, 0, 0, 0.00, 1.00, 0.60},
		{153, 0, 51, 0.94, 1.00, 0.60},
		{153, 0, 102, 0.89, 1.00, 0.60},
		{153, 0, 153, 0.83, 1.00, 0.60},
		{153, 0, 204, 0.79, 1.00, 0.80},
		{153, 0, 255, 0.77, 1.00, 1.00},
		{153, 51, 0, 0.06, 1.00, 0.60},
		{153, 51, 51, 0.00, 0.67, 0.60},
		{153, 51, 102, 0.92, 0.67, 0.60},
		{153, 51, 153, 0.83, 0.67, 0.60},
		{153, 51, 204, 0.78, 0.75, 0.80},
		{153, 51, 255, 0.75, 0.80, 1.00},
		{153, 102, 0, 0.11, 1.00, 0.60},
		{153, 102, 51, 0.08, 0.67, 0.60},
		{153, 102, 102, 0.00, 0.33, 0.60},
		{153, 102, 153, 0.83, 0.33, 0.60},
		{153, 102, 204, 0.75, 0.50, 0.80},
		{153, 102, 255, 0.72, 0.60, 1.00},
		{153, 153, 0, 0.17, 1.00, 0.60},
		{153, 153, 51, 0.17, 0.67, 0.60},
		{153, 153, 102, 0.17, 0.33, 0.60},
		{153, 153, 153, 0.00, 0.00, 0.60},
		{153, 153, 204, 0.67, 0.25, 0.80},
		{153, 153, 255, 0.67, 0.40, 1.00},
		{153, 204, 0, 0.21, 1.00, 0.80},
		{153, 204, 51, 0.22, 0.75, 0.80},
		{153, 204, 102, 0.25, 0.50, 0.80},
		{153, 204, 153, 0.33, 0.25, 0.80},
		{153, 204, 204, 0.50, 0.25, 0.80},
		{153, 204, 255, 0.58, 0.40, 1.00},
		{153, 255, 0, 0.23, 1.00, 1.00},
		{153, 255, 51, 0.25, 0.80, 1.00},
		{153, 255, 102, 0.28, 0.60, 1.00},
		{153, 255, 153, 0.33, 0.40, 1.00},
		{153, 255, 204, 0.42, 0.40, 1.00},
		{153, 255, 255, 0.50, 0.40, 1.00},
		{204, 0, 0, 0.00, 1.00, 0.80},
		{204, 0, 51, 0.96, 1.00, 0.80},
		{204, 0, 102, 0.92, 1.00, 0.80},
		{204, 0, 153, 0.88, 1.00, 0.80},
		{204, 0, 204, 0.83, 1.00, 0.80},
		{204, 0, 255, 0.80, 1.00, 1.00},
		{204, 51, 0, 0.04, 1.00, 0.80},
		{204, 51, 51, 0.00, 0.75, 0.80},
		{204, 51, 102, 0.94, 0.75, 0.80},
		{204, 51, 153, 0.89, 0.75, 0.80},
		{204, 51, 204, 0.83, 0.75, 0.80},
		{204, 51, 255, 0.79, 0.80, 1.00},
		{204, 102, 0, 0.08, 1.00, 0.80},
		{204, 102, 51, 0.06, 0.75, 0.80},
		{204, 102, 102, 0.00, 0.50, 0.80},
		{204, 102, 153, 0.92, 0.50, 0.80},
		{204, 102, 204, 0.83, 0.50, 0.80},
		{204, 102, 255, 0.78, 0.60, 1.00},
		{204, 153, 0, 0.125, 1.00, 0.80},
		{204, 153, 51, 0.11, 0.75, 0.80},
		{204, 153, 102, 0.08, 0.50, 0.80},
		{204, 153, 153, 0.00, 0.25, 0.80},
		{204, 153, 204, 0.83, 0.25, 0.80},
		{204, 153, 255, 0.75, 0.40, 1.00},
		{204, 204, 0, 0.17, 1.00, 0.80},
		{204, 204, 51, 0.17, 0.75, 0.80},
		{204, 204, 102, 0.17, 0.50, 0.80},
		{204, 204, 153, 0.17, 0.25, 0.80},
		{204, 204, 204, 0.00, 0.00, 0.80},
		{204, 204, 255, 0.67, 0.20, 1.00},
		{204, 255, 0, 0.20, 1.00, 1.00},
		{204, 255, 51, 0.21, 0.80, 1.00},
		{204, 255, 102, 0.22, 0.60, 1.00},
		{204, 255, 153, 0.25, 0.40, 1.00},
		{204, 255, 204, 0.33, 0.20, 1.00},
		{204, 255, 255, 0.50, 0.20, 1.00},
		{255, 0, 0, 0.00, 1.00, 1.00},
		{255, 0, 51, 0.97, 1.00, 1.00},
		{255, 0, 102, 0.93, 1.00, 1.00},
		{255, 0, 153, 0.90, 1.00, 1.00},
		{255, 0, 204, 0.87, 1.00, 1.00},
		{255, 0, 255, 0.83, 1.00, 1.00},
		{255, 51, 0, 0.03, 1.00, 1.00},
		{255, 51, 51, 0.00, 0.80, 1.00},
		{255, 51, 102, 0.96, 0.80, 1.00},
		{255, 51, 153, 0.92, 0.80, 1.00},
		{255, 51, 204, 0.88, 0.80, 1.00},
		{255, 51, 255, 0.83, 0.80, 1.00},
		{255, 102, 0, 0.07, 1.00, 1.00},
		{255, 102, 51, 0.04, 0.80, 1.00},
		{255, 102, 102, 0.00, 0.60, 1.00},
		{255, 102, 153, 0.94, 0.60, 1.00},
		{255, 102, 204, 0.89, 0.60, 1.00},
		{255, 102, 255, 0.83, 0.60, 1.00},
		{255, 153, 0, 0.10, 1.00, 1.00},
		{255, 153, 51, 0.08, 0.80, 1.00},
		{255, 153, 102, 0.06, 0.60, 1.00},
		{255, 153, 153, 0.00, 0.40, 1.00},
		{255, 153, 204, 0.92, 0.40, 1.00},
		{255, 153, 255, 0.83, 0.40, 1.00},
		{255, 204, 0, 0.13, 1.00, 1.00},
		{255, 204, 51, 0.125, 0.80, 1.00},
		{255, 204, 102, 0.11, 0.60, 1.00},
		{255, 204, 153, 0.08, 0.40, 1.00},
		{255, 204, 204, 0.00, 0.20, 1.00},
		{255, 204, 255, 0.83, 0.20, 1.00},
		{255, 255, 0, 0.17, 1.00, 1.00},
		{255, 255, 51, 0.17, 0.80, 1.00},
		{255, 255, 102, 0.17, 0.60, 1.00},
		{255, 255, 153, 0.17, 0.40, 1.00},
		{255, 255, 204, 0.17, 0.20, 1.00},
		{255, 255, 255, 0.00, 0.00, 1.00},
	}
	for _, tc := range testCases {
		rgb2hsvTC(tc.r, tc.g, tc.b, tc.hWant, tc.sWant, tc.vWant, t)
	}
}

func TestHSVToRGB(t *testing.T) {
	testCases := []struct {
		h, s, v             float64
		rWant, gWant, bWant uint32
	}{
		{0.000, 0.000, 0.000, 0x0, 0x0, 0x0},
		{0.000, 0.000, 0.250, 0x3fffffff, 0x3fffffff, 0x3fffffff},
		{0.000, 0.000, 0.500, 0x7fffffff, 0x7fffffff, 0x7fffffff},
		{0.000, 0.000, 0.750, 0xbfffffff, 0xbfffffff, 0xbfffffff},
		{0.000, 0.000, 1.000, 0xffffffff, 0xffffffff, 0xffffffff},
		{0.000, 0.250, 0.000, 0x0, 0x0, 0x0},
		{0.000, 0.250, 0.250, 0x3fffffff, 0x2fffffff, 0x2fffffff},
		{0.000, 0.250, 0.500, 0x7fffffff, 0x5fffffff, 0x5fffffff},
		{0.000, 0.250, 0.750, 0xbfffffff, 0x8fffffff, 0x8fffffff},
		{0.000, 0.250, 1.000, 0xffffffff, 0xbfffffff, 0xbfffffff},
		{0.000, 0.500, 0.000, 0x0, 0x0, 0x0},
		{0.000, 0.500, 0.250, 0x3fffffff, 0x1fffffff, 0x1fffffff},
		{0.000, 0.500, 0.500, 0x7fffffff, 0x3fffffff, 0x3fffffff},
		{0.000, 0.500, 0.750, 0xbfffffff, 0x5fffffff, 0x5fffffff},
		{0.000, 0.500, 1.000, 0xffffffff, 0x7fffffff, 0x7fffffff},
		{0.000, 0.750, 0.000, 0x0, 0x0, 0x0},
		{0.000, 0.750, 0.250, 0x3fffffff, 0xfffffff, 0xfffffff},
		{0.000, 0.750, 0.500, 0x7fffffff, 0x1fffffff, 0x1fffffff},
		{0.000, 0.750, 0.750, 0xbfffffff, 0x2fffffff, 0x2fffffff},
		{0.000, 0.750, 1.000, 0xffffffff, 0x3fffffff, 0x3fffffff},
		{0.000, 1.000, 0.000, 0x0, 0x0, 0x0},
		{0.000, 1.000, 0.250, 0x3fffffff, 0x0, 0x0},
		{0.000, 1.000, 0.500, 0x7fffffff, 0x0, 0x0},
		{0.000, 1.000, 0.750, 0xbfffffff, 0x0, 0x0},
		{0.000, 1.000, 1.000, 0xffffffff, 0x0, 0x0},
		{0.250, 0.000, 0.000, 0x0, 0x0, 0x0},
		{0.250, 0.000, 0.250, 0x3fffffff, 0x3fffffff, 0x3fffffff},
		{0.250, 0.000, 0.500, 0x7fffffff, 0x7fffffff, 0x7fffffff},
		{0.250, 0.000, 0.750, 0xbfffffff, 0xbfffffff, 0xbfffffff},
		{0.250, 0.000, 1.000, 0xffffffff, 0xffffffff, 0xffffffff},
		{0.250, 0.250, 0.000, 0x0, 0x0, 0x0},
		{0.250, 0.250, 0.250, 0x37ffffff, 0x3fffffff, 0x2fffffff},
		{0.250, 0.250, 0.500, 0x6fffffff, 0x7fffffff, 0x5fffffff},
		{0.250, 0.250, 0.750, 0xa7ffffff, 0xbfffffff, 0x8fffffff},
		{0.250, 0.250, 1.000, 0xdfffffff, 0xffffffff, 0xbfffffff},
		{0.250, 0.500, 0.000, 0x0, 0x0, 0x0},
		{0.250, 0.500, 0.250, 0x2fffffff, 0x3fffffff, 0x1fffffff},
		{0.250, 0.500, 0.500, 0x5fffffff, 0x7fffffff, 0x3fffffff},
		{0.250, 0.500, 0.750, 0x8fffffff, 0xbfffffff, 0x5fffffff},
		{0.250, 0.500, 1.000, 0xbfffffff, 0xffffffff, 0x7fffffff},
		{0.250, 0.750, 0.000, 0x0, 0x0, 0x0},
		{0.250, 0.750, 0.250, 0x27ffffff, 0x3fffffff, 0xfffffff},
		{0.250, 0.750, 0.500, 0x4fffffff, 0x7fffffff, 0x1fffffff},
		{0.250, 0.750, 0.750, 0x77ffffff, 0xbfffffff, 0x2fffffff},
		{0.250, 0.750, 1.000, 0x9fffffff, 0xffffffff, 0x3fffffff},
		{0.250, 1.000, 0.000, 0x0, 0x0, 0x0},
		{0.250, 1.000, 0.250, 0x1fffffff, 0x3fffffff, 0x0},
		{0.250, 1.000, 0.500, 0x3fffffff, 0x7fffffff, 0x0},
		{0.250, 1.000, 0.750, 0x5fffffff, 0xbfffffff, 0x0},
		{0.250, 1.000, 1.000, 0x7fffffff, 0xffffffff, 0x0},
		{0.500, 0.000, 0.000, 0x0, 0x0, 0x0},
		{0.500, 0.000, 0.250, 0x3fffffff, 0x3fffffff, 0x3fffffff},
		{0.500, 0.000, 0.500, 0x7fffffff, 0x7fffffff, 0x7fffffff},
		{0.500, 0.000, 0.750, 0xbfffffff, 0xbfffffff, 0xbfffffff},
		{0.500, 0.000, 1.000, 0xffffffff, 0xffffffff, 0xffffffff},
		{0.500, 0.250, 0.000, 0x0, 0x0, 0x0},
		{0.500, 0.250, 0.250, 0x2fffffff, 0x3fffffff, 0x3fffffff},
		{0.500, 0.250, 0.500, 0x5fffffff, 0x7fffffff, 0x7fffffff},
		{0.500, 0.250, 0.750, 0x8fffffff, 0xbfffffff, 0xbfffffff},
		{0.500, 0.250, 1.000, 0xbfffffff, 0xffffffff, 0xffffffff},
		{0.500, 0.500, 0.000, 0x0, 0x0, 0x0},
		{0.500, 0.500, 0.250, 0x1fffffff, 0x3fffffff, 0x3fffffff},
		{0.500, 0.500, 0.500, 0x3fffffff, 0x7fffffff, 0x7fffffff},
		{0.500, 0.500, 0.750, 0x5fffffff, 0xbfffffff, 0xbfffffff},
		{0.500, 0.500, 1.000, 0x7fffffff, 0xffffffff, 0xffffffff},
		{0.500, 0.750, 0.000, 0x0, 0x0, 0x0},
		{0.500, 0.750, 0.250, 0xfffffff, 0x3fffffff, 0x3fffffff},
		{0.500, 0.750, 0.500, 0x1fffffff, 0x7fffffff, 0x7fffffff},
		{0.500, 0.750, 0.750, 0x2fffffff, 0xbfffffff, 0xbfffffff},
		{0.500, 0.750, 1.000, 0x3fffffff, 0xffffffff, 0xffffffff},
		{0.500, 1.000, 0.000, 0x0, 0x0, 0x0},
		{0.500, 1.000, 0.250, 0x0, 0x3fffffff, 0x3fffffff},
		{0.500, 1.000, 0.500, 0x0, 0x7fffffff, 0x7fffffff},
		{0.500, 1.000, 0.750, 0x0, 0xbfffffff, 0xbfffffff},
		{0.500, 1.000, 1.000, 0x0, 0xffffffff, 0xffffffff},
		{0.750, 0.000, 0.000, 0x0, 0x0, 0x0},
		{0.750, 0.000, 0.250, 0x3fffffff, 0x3fffffff, 0x3fffffff},
		{0.750, 0.000, 0.500, 0x7fffffff, 0x7fffffff, 0x7fffffff},
		{0.750, 0.000, 0.750, 0xbfffffff, 0xbfffffff, 0xbfffffff},
		{0.750, 0.000, 1.000, 0xffffffff, 0xffffffff, 0xffffffff},
		{0.750, 0.250, 0.000, 0x0, 0x0, 0x0},
		{0.750, 0.250, 0.250, 0x37ffffff, 0x2fffffff, 0x3fffffff},
		{0.750, 0.250, 0.500, 0x6fffffff, 0x5fffffff, 0x7fffffff},
		{0.750, 0.250, 0.750, 0xa7ffffff, 0x8fffffff, 0xbfffffff},
		{0.750, 0.250, 1.000, 0xdfffffff, 0xbfffffff, 0xffffffff},
		{0.750, 0.500, 0.000, 0x0, 0x0, 0x0},
		{0.750, 0.500, 0.250, 0x2fffffff, 0x1fffffff, 0x3fffffff},
		{0.750, 0.500, 0.500, 0x5fffffff, 0x3fffffff, 0x7fffffff},
		{0.750, 0.500, 0.750, 0x8fffffff, 0x5fffffff, 0xbfffffff},
		{0.750, 0.500, 1.000, 0xbfffffff, 0x7fffffff, 0xffffffff},
		{0.750, 0.750, 0.000, 0x0, 0x0, 0x0},
		{0.750, 0.750, 0.250, 0x27ffffff, 0xfffffff, 0x3fffffff},
		{0.750, 0.750, 0.500, 0x4fffffff, 0x1fffffff, 0x7fffffff},
		{0.750, 0.750, 0.750, 0x77ffffff, 0x2fffffff, 0xbfffffff},
		{0.750, 0.750, 1.000, 0x9fffffff, 0x3fffffff, 0xffffffff},
		{0.750, 1.000, 0.000, 0x0, 0x0, 0x0},
		{0.750, 1.000, 0.250, 0x1fffffff, 0x0, 0x3fffffff},
		{0.750, 1.000, 0.500, 0x3fffffff, 0x0, 0x7fffffff},
		{0.750, 1.000, 0.750, 0x5fffffff, 0x0, 0xbfffffff},
		{0.750, 1.000, 1.000, 0x7fffffff, 0x0, 0xffffffff},
		{1.000, 0.000, 0.000, 0x0, 0x0, 0x0},
		{1.000, 0.000, 0.250, 0x3fffffff, 0x3fffffff, 0x3fffffff},
		{1.000, 0.000, 0.500, 0x7fffffff, 0x7fffffff, 0x7fffffff},
		{1.000, 0.000, 0.750, 0xbfffffff, 0xbfffffff, 0xbfffffff},
		{1.000, 0.000, 1.000, 0xffffffff, 0xffffffff, 0xffffffff},
		{1.000, 0.250, 0.000, 0x0, 0x0, 0x0},
		{1.000, 0.250, 0.250, 0x3fffffff, 0x2fffffff, 0x2fffffff},
		{1.000, 0.250, 0.500, 0x7fffffff, 0x5fffffff, 0x5fffffff},
		{1.000, 0.250, 0.750, 0xbfffffff, 0x8fffffff, 0x8fffffff},
		{1.000, 0.250, 1.000, 0xffffffff, 0xbfffffff, 0xbfffffff},
		{1.000, 0.500, 0.000, 0x0, 0x0, 0x0},
		{1.000, 0.500, 0.250, 0x3fffffff, 0x1fffffff, 0x1fffffff},
		{1.000, 0.500, 0.500, 0x7fffffff, 0x3fffffff, 0x3fffffff},
		{1.000, 0.500, 0.750, 0xbfffffff, 0x5fffffff, 0x5fffffff},
		{1.000, 0.500, 1.000, 0xffffffff, 0x7fffffff, 0x7fffffff},
		{1.000, 0.750, 0.000, 0x0, 0x0, 0x0},
		{1.000, 0.750, 0.250, 0x3fffffff, 0xfffffff, 0xfffffff},
		{1.000, 0.750, 0.500, 0x7fffffff, 0x1fffffff, 0x1fffffff},
		{1.000, 0.750, 0.750, 0xbfffffff, 0x2fffffff, 0x2fffffff},
		{1.000, 0.750, 1.000, 0xffffffff, 0x3fffffff, 0x3fffffff},
		{1.000, 1.000, 0.000, 0x0, 0x0, 0x0},
		{1.000, 1.000, 0.250, 0x3fffffff, 0x0, 0x0},
		{1.000, 1.000, 0.500, 0x7fffffff, 0x0, 0x0},
		{1.000, 1.000, 0.750, 0xbfffffff, 0x0, 0x0},
		{1.000, 1.000, 1.000, 0xffffffff, 0x0, 0x0},
	}

	for _, tc := range testCases {
		rGot, gGot, bGot := HSVToRGB(tc.h, tc.s, tc.v)

		if !((rGot == tc.rWant) && (gGot == tc.gWant) && (bGot == tc.bWant)) {
			inStr := hsvStr(tc.h, tc.s, tc.v)
			t.Errorf("HSVToRGB failed for %v: want (%x, %x, %x), got (%x, %x, %x)", inStr, tc.rWant, tc.gWant, tc.bWant, rGot, gGot, bGot)
		}
	}
}
